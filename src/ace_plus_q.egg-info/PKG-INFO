Metadata-Version: 2.4
Name: ace_plus_q
Version: 0.1.0
Summary: TensorFlow implementation of ACE + Q
Author-email: Matteo Rinaldi <mrinaldi@fhi-berlin.mpg.de>
License-Expression: MIT
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: <3.10
Description-Content-Type: text/markdown
Requires-Dist: scipy
Requires-Dist: tensorflow
Requires-Dist: numpy
Requires-Dist: pandas
Requires-Dist: ase
Requires-Dist: ruamel.yaml

# ACE+Q

This repository contains TensorFlow implementations of the **ACE+Q** theory, as described in the paper [Charge-constrained atomic cluster expansion](https://journals.aps.org/prmaterials/abstract/10.1103/PhysRevMaterials.9.033802) by Rinaldi et al.[1]


## Overview 

The ACE+Q framework allows to train Atomic Cluster Expansion (ACE) models with charge equilibration (Qeq). The repository contains the potential files designed for non periodic (`qace.py`) and periodic (`qace_pbc.py`) systems, with the periodic version employing **Ewald summation**. 

These implementations were developed as part of [pacemaker](https://github.com/ICAMS/python-ace), a package for training Atomic Cluster Expansion models.

## Installation

1. Create a `conda` environment with the command:

`conda create -n ace python=3.9`

2. Download the `pyace` repository:

```bash
git clone https://github.com/ICAMS/python-ace.git
cd python-ace
```

3. Run installation script:

`pip install --upgrade .`

4. Install compatible version of TensorFlow:

`pip install tensorflow==2.8.0` 

5. Download the `ace_plus_q` repository and run the installation script:

`pip install --upgrade .`

Now, `ace_plus_q` should be available from the terminal, if corresponding conda environment is loaded.


## Running fit

To run fit, it is required to provide:

1. Training dataset. How to create a dataset in a suitable format can be found here:
   https://pacemaker.readthedocs.io/en/latest/pacemaker/quickstart/#optional_manual_fitting_dataset_preparation . 
The only additional information required is the total charge. It should be added in the `total_charge` column of the DataFrame.
Optionally, one can include  the set of atomic charges and/or the total dipole moment adding the `atomic_charges` 
and `total_dipole` columns to the DataFrame. A non-periodic or periodic fit will be performed based on the periodicity
of the structures contained in dataset.

2. Input file in the `.yaml` format. Example of the file could be found in the `examples` folder.
Parameters found in this file are described below.

To start a fit simply run `ace_plus_q input.yaml [-p potential.yaml] [-o output]`.

## Input file

`input.yaml` has the several sections determining the training hyperparameters and the potential parameters.
Sections `elements`, `embeddings`, `bonds`, `functions` are identical to the standard `pacemaker` setting and described here:
https://pacemaker.readthedocs.io/en/latest/pacemaker/inputfile/#interatomic_potential_or_b-basis_configuration
Moreover, to enable expansion of electronegativity ($\chi$) and atomic hardness ($\eta$) contributions, one should set:

```
'ndensity': 3,
'fs_parameters': [1, 1, 1, 0.5, 1, 1],
```

for variable $\chi$ and constant $\eta$, while:  

```
'ndensity': 4,
'fs_parameters': [1, 1, 1, 0.5, 1, 1, 1, 1],
```

for variable $\chi$ and $\eta$. The values of $\chi_{0}$ and $\eta_{0}$ in Eq. 29 and 30 in [1] can be 
provided as:



Section `data` specifies the path to the dataframe through `data_path`, `cutoff` determines the
cutoff for the neighborlist construction, and `test_fraction` specifies the fraction of the provided
dataset that will be reserved for testing.

In the `fit` section,
`opt_params` set the optimizer specific parameters. By default, the scipy "L-BFGS-B" optimizer is used
https://docs.scipy.org/doc/scipy/reference/optimize.minimize-lbfgsb.html

`force_weight` and `energy_weight` defines the scaling factors in front of the respective contributions
to the loss function.

Similarly, `L1_reg` and `L2_reg` specify the factors for the L1 and L2 regularization terms.

`batch_size` controls the number of structures processed at once and is used to control the memory consumption.

`max_iter` sets the maximum number of steps performed by the optimizer,

and every `save_interval` the current state of the potential is saved.

The saved potential can be used to restart the fit, example: `ace_plus_q input.yaml -p ../old_fit/saves/step_1/q_ace.yaml`.



## Compute using the ACE + Q potential

Computations can be performed using python [ASE](https://wiki.fysik.dtu.dk/ase/) framework.
To do this, both the intermittent save `.yaml` files could be used as well as TensorFlow SavedModel
produced after the successful completion of the fit. The corresponding examples can be found in the
[example_use_fitted_magnetic_ace.ipynb](examples%2Fexample_use_fitted_magnetic_ace.ipynb) in the [examples](examples) folder.


## References

[1] M. Rinaldi et al., Phys. Rev. Mater. 9, 033802 (2025)
